Kafka Setup on Mac: Steps, Challenges, and Resolutions
Steps Followed

<!-- Download and Install Kafka -->

Installed kafka_2.13-4.1.0 on Mac.

Installed Java 17 (required for Kafka 4.x).

<!-- Understand Kafka 4.x Changes -->

Kafka 4.x and above no longer require ZooKeeper.

KRaft mode (Kafka Raft Metadata mode) is integrated as the cluster manager.

server.properties contains configuration for both broker and controller if using a single-node setup.

<!-- Configure the Broker -->

Edited config/server.properties:

node.id=1
process.roles=broker,controller
listeners=PLAINTEXT://:9092,CONTROLLER://:9093
controller.listener.names=CONTROLLER
controller.quorum.voters=1@localhost:9093
log.dirs=/tmp/kraft-combined-logs
inter.broker.listener.name=PLAINTEXT


Removed deprecated/unused properties like controller.quorum.bootstrap.servers.

<!-- Format Kafka Storage -->

Ran:

bin/kafka-storage.sh format -t $(bin/kafka-storage.sh random-uuid) -c config/server.properties


This created meta.properties in the log directory for KRaft.

<!-- Start the Kafka Broker -->

bin/kafka-server-start.sh config/server.properties


Broker logs confirmed successful startup:

INFO [KafkaRaftServer nodeId=1] Kafka Server started


<!-- Start Producer and Consumer -->

Opened a new tab for producer:

bin/kafka-console-producer.sh --topic test-topic --bootstrap-server localhost:9092


Opened a new tab for consumer:

bin/kafka-console-consumer.sh --topic test-topic --from-beginning --bootstrap-server localhost:9092


Sent and received messages successfully.

<!-- Integrate with Jupyter Notebook -->

Installed kafka-python in the notebook environment:

import sys
!{sys.executable} -m pip install kafka-python


Sent random records from a CSV to Kafka in JSON format.

Built loops to send multiple messages (up to 100 random rows) to Kafka from Jupyter.

<!-- Shutdown and Restart -->

Learned what happens when broker, producer, or consumer tabs are closed:

Closing broker → cluster stops, messages remain on disk.

Closing producer → stops sending, Kafka keeps messages.

Closing consumer → leaves consumer group, messages remain.

Restarted broker, producer, and consumer to resume operations.